#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require_relative "lexer"
	require_relative "my_lang_core"

class MyLang < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 35)
	def parse(input)
		scan_str(input)
	end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     6,     9,    10,     6,     8,     9,     6,     3,     4,     7,
     3,     4,     7,     3,     4,     7,     6,    14,    15,     6,
   nil,   nil,     6,     3,     4,     7,     3,     4,     7,     3,
     4,     7,     6,    20,     9,    10,    11,    12,   nil,     3,
     4,     7,     9,    10,    11,    12,     9,    10,    11,    12,
     9,    10,    11 ]

racc_action_check = [
     0,    18,    18,    14,     1,    17,    12,     0,     0,     0,
    14,    14,    14,    12,    12,    12,     6,     7,     8,     9,
   nil,   nil,    10,     6,     6,     6,     9,     9,     9,    10,
    10,    10,    11,    13,    13,    13,    13,    13,   nil,    11,
    11,    11,    21,    21,    21,    21,     2,     2,     2,     2,
    19,    19,    19 ]

racc_action_pointer = [
    -2,     4,    42,   nil,   nil,   nil,    14,     9,    18,    17,
    20,    30,     4,    30,     1,   nil,   nil,     1,    -3,    46,
   nil,    38 ]

racc_action_default = [
   -12,   -12,    -1,    -2,    -3,    -4,   -12,   -10,   -12,   -12,
   -12,   -12,   -12,   -12,   -12,    22,    -5,    -6,    -7,    -8,
    -9,   -11 ]

racc_goto_table = [
     2,     1,   nil,   nil,   nil,   nil,    13,   nil,   nil,    16,
    17,    18,    19,   nil,    21 ]

racc_goto_check = [
     2,     1,   nil,   nil,   nil,   nil,     2,   nil,   nil,     2,
     2,     2,     2,   nil,     2 ]

racc_goto_pointer = [
   nil,     1,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     5 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 13, :_reduce_none,
  1, 14, :_reduce_2,
  1, 14, :_reduce_3,
  1, 14, :_reduce_none,
  3, 14, :_reduce_5,
  3, 14, :_reduce_6,
  3, 14, :_reduce_7,
  3, 14, :_reduce_8,
  3, 14, :_reduce_9,
  1, 14, :_reduce_10,
  3, 15, :_reduce_11 ]

racc_reduce_n = 12

racc_shift_n = 22

racc_token_table = {
  false => 0,
  :error => 1,
  :LEFT_PARENTHESIS => 2,
  :RIGHT_PARENTHESIS => 3,
  :MULTIPLY => 4,
  :DIVIDE => 5,
  :ADD => 6,
  :SUBTRACT => 7,
  :EQUALS => 8,
  :NUMBER => 9,
  :STRING => 10,
  :VAR => 11 }

racc_nt_base = 12

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "LEFT_PARENTHESIS",
  "RIGHT_PARENTHESIS",
  "MULTIPLY",
  "DIVIDE",
  "ADD",
  "SUBTRACT",
  "EQUALS",
  "NUMBER",
  "STRING",
  "VAR",
  "$start",
  "expression",
  "value",
  "assignment" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_2(val, _values, result)
     return Value.new(val[0], "Number") 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_3(val, _values, result)
     return Value.new(MyLangCore.str_escape(val[0]), "String") 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_5(val, _values, result)
     return MyLangCore.binary_operator(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_6(val, _values, result)
     return MyLangCore.binary_operator(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_7(val, _values, result)
     return MyLangCore.binary_operator(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_8(val, _values, result)
     return MyLangCore.binary_operator(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_9(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_10(val, _values, result)
     return MyLangCore.get_var(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_11(val, _values, result)
     return MyLangCore.new_variable(val[0], val[2]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyLang
