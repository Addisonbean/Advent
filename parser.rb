#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require_relative "lexer"
	require_relative "my_lang_core"

class MyLangParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 59)
	def parse(input)
		scan_str(input)
	end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    13,    18,    18,    14,    15,     3,     7,    29,    21,     3,
     7,    23,    32,     4,     5,     8,    11,     4,     5,     8,
    11,     7,    18,   nil,    14,     7,   nil,   nil,     4,     5,
     8,    11,     4,     5,     8,    11,     7,    12,   nil,    13,
     7,   nil,   nil,     4,     5,     8,    11,     4,     5,     8,
    11,     7,   nil,   nil,   nil,     7,   nil,   nil,     4,     5,
     8,    11,     4,     5,     8,    11,     7,   nil,   nil,   nil,
     7,   nil,   nil,     4,     5,     8,    11,     4,     5,     8,
    11,    18,   nil,    14,    15,    16,    17,    18,   nil,    14,
    15,    16,    17,    18,    30,    14,    15,    16,    17,    18,
   nil,    14,    15,    16 ]

racc_action_check = [
    22,    27,    25,    27,    27,     0,     0,    18,     8,    11,
    11,    12,    22,     0,     0,     0,     0,    11,    11,    11,
    11,    17,    26,   nil,    26,     7,   nil,   nil,    17,    17,
    17,    17,     7,     7,     7,     7,     3,     1,   nil,     1,
    21,   nil,   nil,     3,     3,     3,     3,    21,    21,    21,
    21,    15,   nil,   nil,   nil,    13,   nil,   nil,    15,    15,
    15,    15,    13,    13,    13,    13,    14,   nil,   nil,   nil,
    16,   nil,   nil,    14,    14,    14,    14,    16,    16,    16,
    16,    31,   nil,    31,    31,    31,    31,     2,   nil,     2,
     2,     2,     2,    20,    20,    20,    20,    20,    20,    28,
   nil,    28,    28,    28 ]

racc_action_pointer = [
     3,    37,    84,    33,   nil,   nil,   nil,    22,    -1,   nil,
   nil,     7,    11,    52,    63,    48,    67,    18,     3,   nil,
    90,    37,    -2,   nil,   nil,    -1,    19,    -2,    96,   nil,
   nil,    78,   nil ]

racc_action_default = [
   -20,   -20,    -1,    -4,    -6,    -7,    -8,   -20,   -14,   -15,
   -16,   -20,   -20,    -2,   -20,   -20,   -20,   -20,   -20,    -3,
   -20,   -20,   -20,    33,    -5,    -9,   -10,   -11,   -12,   -19,
   -13,   -17,   -18 ]

racc_goto_table = [
    20,   nil,     1,   nil,   nil,    19,   nil,    25,    26,    27,
    28,   nil,   nil,    22,    31,    24 ]

racc_goto_check = [
     2,   nil,     1,   nil,   nil,     1,   nil,     2,     2,     2,
     2,   nil,   nil,     1,     2,     1 ]

racc_goto_pointer = [
   nil,     2,    -7,   nil,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     2,     6,     9,    10 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 16, :_reduce_none,
  2, 16, :_reduce_2,
  2, 16, :_reduce_3,
  1, 16, :_reduce_none,
  3, 16, :_reduce_5,
  1, 17, :_reduce_6,
  1, 17, :_reduce_7,
  1, 17, :_reduce_none,
  3, 17, :_reduce_9,
  3, 17, :_reduce_10,
  3, 17, :_reduce_11,
  3, 17, :_reduce_12,
  3, 17, :_reduce_13,
  1, 17, :_reduce_14,
  1, 17, :_reduce_none,
  1, 17, :_reduce_none,
  3, 18, :_reduce_17,
  3, 19, :_reduce_18,
  3, 20, :_reduce_19 ]

racc_reduce_n = 20

racc_shift_n = 33

racc_token_table = {
  false => 0,
  :error => 1,
  :NEW_LINE => 2,
  :LEFT_PARENTHESIS => 3,
  :RIGHT_PARENTHESIS => 4,
  :MULTIPLY => 5,
  :DIVIDE => 6,
  :ADD => 7,
  :SUBTRACT => 8,
  :EQUALS => 9,
  :NUMBER => 10,
  :STRING => 11,
  :VAR => 12,
  :CURLY_BRACKET_L => 13,
  :CURLY_BRACKET_R => 14 }

racc_nt_base = 15

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEW_LINE",
  "LEFT_PARENTHESIS",
  "RIGHT_PARENTHESIS",
  "MULTIPLY",
  "DIVIDE",
  "ADD",
  "SUBTRACT",
  "EQUALS",
  "NUMBER",
  "STRING",
  "VAR",
  "CURLY_BRACKET_L",
  "CURLY_BRACKET_R",
  "$start",
  "expression",
  "value",
  "assignment",
  "block",
  "call_block" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_2(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_3(val, _values, result)
     return val[1] 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_5(val, _values, result)
     return [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_6(val, _values, result)
     return [:NUMBER, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_7(val, _values, result)
     return [:STRING, MyLangCore.str_escape(val[0])] 
    result
  end
.,.,

# reduce 8 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_9(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_10(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_11(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_12(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_13(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_14(val, _values, result)
     return [:VAR, val[0]] 
    result
  end
.,.,

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_17(val, _values, result)
     return [:ASSIGN, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_18(val, _values, result)
     return [:BLOCK, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_19(val, _values, result)
     return [:CALL, val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyLangParser
