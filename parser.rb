#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'

	require_relative "lexer"
	require_relative "my_lang_core"

class MyLangParser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 56)
	def parse(input)
		scan_str(input)
	end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    15,    20,    20,    16,    17,    18,    19,     3,     9,    20,
    24,    16,    17,    13,    36,     4,     5,     6,     7,    10,
    13,     3,     9,    20,    14,    16,    15,     9,    32,     4,
     5,     6,     7,    10,    13,     5,     6,     7,    10,    13,
     9,    20,    26,    16,    17,    18,     9,   nil,     5,     6,
     7,    10,    13,     4,     5,     6,     7,    10,    13,     9,
   nil,   nil,   nil,   nil,     9,   nil,   nil,     5,     6,     7,
    10,    13,     5,     6,     7,    10,    13,     9,   nil,   nil,
   nil,   nil,     9,   nil,     4,     5,     6,     7,    10,    13,
     5,     6,     7,    10,    13,     9,   nil,   nil,   nil,   nil,
     9,   nil,   nil,     5,     6,     7,    10,    13,     5,     6,
     7,    10,    13,    20,   nil,    16,    17,    18,    19,    20,
   nil,    16,    17,    18,    19,    20,    34,    16,    17,    18,
    19 ]

racc_action_check = [
    25,    22,    28,    22,    22,    22,    22,     0,     0,    30,
    10,    30,    30,    22,    25,     0,     0,     0,     0,     0,
     0,    13,    13,    29,     1,    29,     1,     4,    20,    13,
    13,    13,    13,    13,    13,     4,     4,     4,     4,     4,
     9,    31,    14,    31,    31,    31,     3,   nil,     9,     9,
     9,     9,     9,     3,     3,     3,     3,     3,     3,    24,
   nil,   nil,   nil,   nil,    19,   nil,   nil,    24,    24,    24,
    24,    24,    19,    19,    19,    19,    19,    15,   nil,   nil,
   nil,   nil,    16,   nil,    15,    15,    15,    15,    15,    15,
    16,    16,    16,    16,    16,    17,   nil,   nil,   nil,   nil,
    18,   nil,   nil,    17,    17,    17,    17,    17,    18,    18,
    18,    18,    18,    35,   nil,    35,    35,    35,    35,     2,
   nil,     2,     2,     2,     2,    23,    23,    23,    23,    23,
    23 ]

racc_action_pointer = [
     5,    24,   116,    43,    24,   nil,   nil,   nil,   nil,    37,
     1,   nil,   nil,    19,    42,    74,    79,    92,    97,    61,
    24,   nil,    -2,   122,    56,    -2,   nil,   nil,    -1,    20,
     6,    38,   nil,   nil,   nil,   110,   nil ]

racc_action_default = [
   -22,   -22,    -1,    -4,   -22,    -7,    -8,    -9,   -10,   -22,
   -16,   -17,   -18,   -22,   -22,    -2,   -22,   -22,   -22,   -22,
   -22,    -3,   -22,   -22,   -22,   -22,    37,    -5,   -11,   -12,
   -13,   -14,   -21,    -6,   -15,   -19,   -20 ]

racc_goto_table = [
    22,    33,   nil,     1,   nil,    23,    21,   nil,   nil,   nil,
   nil,   nil,    28,    29,    30,    31,    25,   nil,    27,   nil,
    35 ]

racc_goto_check = [
     2,     3,   nil,     1,   nil,     2,     1,   nil,   nil,   nil,
   nil,   nil,     2,     2,     2,     2,     1,   nil,     1,   nil,
     2 ]

racc_goto_pointer = [
   nil,     3,    -4,   -21,   nil,   nil ]

racc_goto_default = [
   nil,   nil,     2,    11,     8,    12 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 18, :_reduce_none,
  2, 18, :_reduce_2,
  2, 18, :_reduce_3,
  1, 18, :_reduce_none,
  3, 18, :_reduce_5,
  3, 18, :_reduce_6,
  1, 19, :_reduce_7,
  1, 19, :_reduce_8,
  1, 19, :_reduce_9,
  1, 19, :_reduce_none,
  3, 19, :_reduce_11,
  3, 19, :_reduce_12,
  3, 19, :_reduce_13,
  3, 19, :_reduce_14,
  3, 19, :_reduce_15,
  1, 19, :_reduce_16,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  3, 21, :_reduce_19,
  3, 20, :_reduce_20,
  3, 22, :_reduce_21 ]

racc_reduce_n = 22

racc_shift_n = 37

racc_token_table = {
  false => 0,
  :error => 1,
  :NEW_LINE => 2,
  :LEFT_PARENTHESIS => 3,
  :RIGHT_PARENTHESIS => 4,
  :MULTIPLY => 5,
  :DIVIDE => 6,
  :ADD => 7,
  :SUBTRACT => 8,
  :EQUALS => 9,
  :IF => 10,
  :NUMBER => 11,
  :STRING => 12,
  :NULL => 13,
  :VAR => 14,
  :CURLY_BRACKET_L => 15,
  :CURLY_BRACKET_R => 16 }

racc_nt_base = 17

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "NEW_LINE",
  "LEFT_PARENTHESIS",
  "RIGHT_PARENTHESIS",
  "MULTIPLY",
  "DIVIDE",
  "ADD",
  "SUBTRACT",
  "EQUALS",
  "IF",
  "NUMBER",
  "STRING",
  "NULL",
  "VAR",
  "CURLY_BRACKET_L",
  "CURLY_BRACKET_R",
  "$start",
  "expression",
  "value",
  "block",
  "assignment",
  "call_block" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 14)
  def _reduce_2(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_3(val, _values, result)
     return val[1] 
    result
  end
.,.,

# reduce 4 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_5(val, _values, result)
     return [*val[0], *val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_6(val, _values, result)
     return [:IF, val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_7(val, _values, result)
     return [:NUMBER, val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_8(val, _values, result)
     return [:STRING, MyLangCore.str_escape(val[0])] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_9(val, _values, result)
     return [:NULL] 
    result
  end
.,.,

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_11(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 27)
  def _reduce_12(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_13(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_14(val, _values, result)
     return [:OPERATOR, val[1], val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_15(val, _values, result)
     return val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_16(val, _values, result)
     return [:VAR, val[0]] 
    result
  end
.,.,

# reduce 17 omitted

# reduce 18 omitted

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_19(val, _values, result)
     return [:ASSIGN, val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_20(val, _values, result)
     return [:BLOCK, val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_21(val, _values, result)
     return [:CALL, val[0]] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class MyLangParser
